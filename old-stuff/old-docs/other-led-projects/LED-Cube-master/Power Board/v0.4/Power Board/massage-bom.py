#!/usr/bin/env python3

"""
read the BOM generated by KiCad's bom2grouped_csv
and make suitable for Digikey import.
"""

import csv
import re
import sys

BUILD_QUANTITY = 5

EXPORT_FIELDS = (
    'Reference',
    'Quantity',
    'Digikey No.',
    'Part No.',
)

sym_match = re.compile(r'(?P<letters>\D+)(?P<digits>\d+)\Z').match

def sym_key(sym):
    m = sym_match(sym)
    if not m:
        return sym
    return (m.group('letters'), int(m.group('digits')))


def ref_key(ref):
        return sorted(sym_key(sym) for sym in ref.split())


def condense_ranges(seq):
    # print(f'condense_ranges(seq={seq!r})')
    first = None
    last = None
    for i in seq:
        if last is None:
            first = last = i
        elif i == last + 1:
            last = i
        else:
            yield (first, last)
            first = last = i
    if last is not None:
        yield (first, last)


def format_range(letter, range):
    first, last = range
    if first == last:
        return f'{letter}{first}'
    else:
        return f'{letter}{first}-{last}'


def massage_reference(ref):
    orig_ref = ref
    syms = ref.split()
    key = ref_key(ref)
    letter = key[0][0]
    assert all(k[0] == letter for k in key)
    ranges = condense_ranges([k[1] for k in key])
    ref = ' '.join(format_range(letter, r) for r in ranges)
    ref = 'CUBE-PB4 ' + ref
    # print(f'ref {orig_ref!r} -> {ref!r}')
    return ref
    # for r in ranges:
    #     if r[0] == r[1]
    # for k in key:
    #     pass
    # syms = sorted(syms, key=sym_key)
    # nref = ' '.join(syms)
    # print(f'ref {ref!r} -> {nref!r}')
    # return ref


def adjust_quantity(q):
    q *= BUILD_QUANTITY
    if q < 10:
        q = 10
    elif q < 25:
        q = 25
    elif q < 50:
        q = 50
    elif q < 100:
        q = 100
    return q


def massage(csv_in, csv_out):
    cr = csv.DictReader(csv_in, skipinitialspace=True)
    cw = csv.DictWriter(csv_out, EXPORT_FIELDS, extrasaction='ignore')
    cw.writerow({f:f for f in EXPORT_FIELDS})
    table = []
    for row in cr:
        table.append(row)
    table.sort(key=lambda row: ref_key(row['Reference']))
    for row in table:
        if row['Digikey No.'].endswith('-ND'):
            row['Reference'] = massage_reference(row['Reference'])
            row['Quantity'] = adjust_quantity(int(row['Quantity']))
            cw.writerow(row)


def main(argv):
    if len(argv) == 1:
        massage(sys.stdin, sys.stdout)
    else:
        for file in argv[1:]:
            with open(file, 'r') as csv_in:
                massage(csv_in, sys.stdout)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
